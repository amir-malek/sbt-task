{
  "version": 3,
  "sources": ["../worker/manifest.js", "../worker/index.js"],
  "sourcesContent": ["self.__PRECACHE_MANIFEST = [\n  {\n    \"url\": \"/default-avatar.png\",\n    \"revision\": \"7d70d0aa\"\n  },\n  {\n    \"url\": \"/default-avatar.svg\",\n    \"revision\": \"bfb19ed7\"\n  },\n  {\n    \"url\": \"/file.svg\",\n    \"revision\": \"d09f9520\"\n  },\n  {\n    \"url\": \"/globe.svg\",\n    \"revision\": \"2aaafa6a\"\n  },\n  {\n    \"url\": \"/icon-192x192.png\",\n    \"revision\": \"7d70d0aa\"\n  },\n  {\n    \"url\": \"/icon-512x512.png\",\n    \"revision\": \"7d70d0aa\"\n  },\n  {\n    \"url\": \"/icon.svg\",\n    \"revision\": \"bc9cf19a\"\n  },\n  {\n    \"url\": \"/manifest.json\",\n    \"revision\": \"a352b8ce\"\n  },\n  {\n    \"url\": \"/next.svg\",\n    \"revision\": \"8e061864\"\n  },\n  {\n    \"url\": \"/screenshot-desktop.png\",\n    \"revision\": \"7d70d0aa\"\n  },\n  {\n    \"url\": \"/screenshot-mobile.png\",\n    \"revision\": \"7d70d0aa\"\n  },\n  {\n    \"url\": \"/sw.js\",\n    \"revision\": \"127f5b58\"\n  },\n  {\n    \"url\": \"/vercel.svg\",\n    \"revision\": \"c0af2f50\"\n  },\n  {\n    \"url\": \"/window.svg\",\n    \"revision\": \"a2760511\"\n  },\n  {\n    \"url\": \"/\",\n    \"revision\": \"ba3988db\"\n  },\n  {\n    \"url\": \"/articles\",\n    \"revision\": \"dba5d918\"\n  },\n  {\n    \"url\": \"/offline\",\n    \"revision\": \"27a21354\"\n  }\n];", "// Manual PWA Service Worker\n// No Workbox dependencies - complete control over caching behavior\n\nconst CACHE_VERSION = 'blog-pwa-v2.0.0';\nconst STATIC_CACHE = `${CACHE_VERSION}-static`;\nconst DYNAMIC_CACHE = `${CACHE_VERSION}-dynamic`;\nconst API_CACHE = `${CACHE_VERSION}-api`;\nconst OFFLINE_CACHE = `${CACHE_VERSION}-offline`;\n\n// Cache all precached assets on install\nself.addEventListener('install', event => {\n  console.log('Service worker installing...');\n  \n  event.waitUntil(\n    (async () => {\n      try {\n        // Cache static assets from manifest\n        const staticCache = await caches.open(STATIC_CACHE);\n        const urlsToCache = self.__PRECACHE_MANIFEST?.map(entry => entry.url) || [];\n        \n        if (urlsToCache.length > 0) {\n          await staticCache.addAll(urlsToCache);\n          console.log(`Precached ${urlsToCache.length} static assets`);\n        }\n        \n        // Ensure offline page is cached\n        const offlineCache = await caches.open(OFFLINE_CACHE);\n        try {\n          await offlineCache.add('/offline');\n          console.log('Offline page cached successfully');\n        } catch (error) {\n          console.warn('Could not cache offline page:', error);\n        }\n        \n        // Force activation\n        self.skipWaiting();\n        \n      } catch (error) {\n        console.error('Service worker install failed:', error);\n      }\n    })()\n  );\n});\n\n// Take control and clean up old caches\nself.addEventListener('activate', event => {\n  console.log('Service worker activating...');\n  \n  event.waitUntil(\n    (async () => {\n      // Clean up old caches\n      const cacheNames = await caches.keys();\n      const currentCaches = [STATIC_CACHE, DYNAMIC_CACHE, API_CACHE, OFFLINE_CACHE];\n      \n      await Promise.all(\n        cacheNames.map(async cacheName => {\n          if (!currentCaches.some(current => cacheName.startsWith(current.split('-')[0]))) {\n            console.log('Deleting old cache:', cacheName);\n            await caches.delete(cacheName);\n          }\n        })\n      );\n      \n      // Take control of all clients\n      await self.clients.claim();\n      console.log('Service worker activated and took control');\n    })()\n  );\n});\n\n// Handle all fetch events\nself.addEventListener('fetch', event => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Skip cross-origin requests and chrome-extension requests\n  if (url.origin !== self.location.origin) {\n    return;\n  }\n  \n  event.respondWith(handleRequest(request));\n});\n\nasync function handleRequest(request) {\n  const url = new URL(request.url);\n  \n  try {\n    // Handle different types of requests\n    if (request.mode === 'navigate') {\n      return await handleNavigationRequest(request);\n    } else if (url.pathname.startsWith('/api/') || url.origin.includes('realworld.show')) {\n      return await handleApiRequest(request);\n    } else if (request.destination === 'image' || request.destination === 'font') {\n      return await handleAssetRequest(request);\n    } else {\n      return await handleStaticRequest(request);\n    }\n  } catch (error) {\n    console.error('Request failed:', request.url, error);\n    \n    // Return offline page for navigation failures\n    if (request.mode === 'navigate') {\n      return await getOfflinePage();\n    }\n    \n    return new Response('Network Error', { \n      status: 503, \n      statusText: 'Service Unavailable' \n    });\n  }\n}\n\n// Handle navigation requests (pages)\nasync function handleNavigationRequest(request) {\n  console.log('Handling navigation:', request.url);\n  \n  try {\n    // Try network first with timeout\n    const networkResponse = await Promise.race([\n      fetch(request),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Network timeout')), 3000)\n      )\n    ]);\n    \n    if (networkResponse.ok) {\n      // Cache successful navigation responses\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, networkResponse.clone());\n      return networkResponse;\n    }\n    \n    throw new Error('Network response not ok');\n    \n  } catch (error) {\n    console.log('Network failed, trying cache:', error.message);\n    \n    // Try cache first\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      console.log('Serving from cache:', request.url);\n      return cachedResponse;\n    }\n    \n    // Return offline page as fallback\n    console.log('Serving offline page fallback');\n    return await getOfflinePage();\n  }\n}\n\n// Handle API requests\nasync function handleApiRequest(request) {\n  console.log('Handling API request:', request.url);\n  \n  try {\n    const networkResponse = await fetch(request);\n    \n    if (networkResponse.ok) {\n      // Cache successful API responses\n      const cache = await caches.open(API_CACHE);\n      cache.put(request, networkResponse.clone());\n    }\n    \n    return networkResponse;\n    \n  } catch (error) {\n    // Return cached API response if available\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      console.log('Serving API from cache:', request.url);\n      return cachedResponse;\n    }\n    \n    throw error;\n  }\n}\n\n// Handle static assets (images, fonts, etc.)\nasync function handleAssetRequest(request) {\n  const cachedResponse = await caches.match(request);\n  if (cachedResponse) {\n    return cachedResponse;\n  }\n  \n  try {\n    const networkResponse = await fetch(request);\n    if (networkResponse.ok) {\n      const cache = await caches.open(STATIC_CACHE);\n      cache.put(request, networkResponse.clone());\n    }\n    return networkResponse;\n  } catch (error) {\n    // Return a placeholder or let it fail gracefully\n    throw error;\n  }\n}\n\n// Handle other static requests\nasync function handleStaticRequest(request) {\n  const cachedResponse = await caches.match(request);\n  if (cachedResponse) {\n    return cachedResponse;\n  }\n  \n  const networkResponse = await fetch(request);\n  if (networkResponse.ok) {\n    const cache = await caches.open(STATIC_CACHE);\n    cache.put(request, networkResponse.clone());\n  }\n  \n  return networkResponse;\n}\n\n// Get offline page\nasync function getOfflinePage() {\n  try {\n    const offlineResponse = await caches.match('/offline');\n    if (offlineResponse) {\n      return offlineResponse;\n    }\n    \n    // Fallback if offline page not cached\n    return new Response(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Offline - Blog Platform</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        </head>\n        <body style=\"font-family: system-ui; text-align: center; padding: 2rem;\">\n          <h1>\uD83D\uDCE1 You're offline</h1>\n          <p>Your internet connection is unavailable.</p>\n          <button onclick=\"location.reload()\">Try Again</button>\n        </body>\n      </html>\n    `, {\n      headers: { 'Content-Type': 'text/html' },\n      status: 200\n    });\n  } catch (error) {\n    console.error('Failed to serve offline page:', error);\n    return new Response('Offline', { status: 200 });\n  }\n}\n\n// Handle background sync\nself.addEventListener('sync', event => {\n  console.log('Background sync triggered:', event.tag);\n  \n  if (event.tag === 'background-sync') {\n    event.waitUntil(handleBackgroundSync());\n  }\n});\n\nasync function handleBackgroundSync() {\n  console.log('Processing background sync...');\n  // Implementation for queued requests when connection is restored\n  // This can be expanded based on your needs\n}\n\n// Handle messages from the main thread\nself.addEventListener('message', event => {\n  const { type, data } = event.data || {};\n  \n  switch (type) {\n    case 'SKIP_WAITING':\n      self.skipWaiting();\n      break;\n    case 'CACHE_URLS':\n      // Allow manual caching of URLs\n      if (data && Array.isArray(data)) {\n        event.waitUntil(cacheUrls(data));\n      }\n      break;\n    default:\n      console.log('Received message:', event.data);\n  }\n});\n\nasync function cacheUrls(urls) {\n  try {\n    const cache = await caches.open(DYNAMIC_CACHE);\n    await cache.addAll(urls);\n    console.log('Manually cached URLs:', urls);\n  } catch (error) {\n    console.error('Failed to cache URLs:', error);\n  }\n}\n\nconsole.log('Service Worker loaded successfully!');"],
  "mappings": "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",
  "names": []
}
